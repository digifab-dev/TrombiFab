{"version":3,"file":"static/js/644.4ef890ec.chunk.js","mappings":"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","sources":["util/CountriesDataFilter.tsx","util/CitiesDataFilter.tsx","components/Map.tsx"],"sourcesContent":["import countriesData from '../assets/countries.json';\n\nimport Country from '../interfaces/country';\n\nconst countries: any = countriesData;\n\n// Filtrer les données du pays pour ne retourner que le nom et les valeurs [lat,lng].\nconst filteredCountryData = countries.map((country: Country) => {\n  return { 'name': country.COUNTRY, 'latlng': [parseFloat(country.latitude).toFixed(1),parseFloat(country.longitude).toFixed(1)] };\n});\n\nexport const countriesWithLatLng = filteredCountryData;","import citiesData from \"../assets/cities.json\"\n\nimport City from \"../interfaces/city\"\n\nconst cities: any = citiesData\n\n// Filtrer les données de la ville pour ne retourner que le nom et les valeurs [lat,lng].\nconst filteredCityData = cities.map((city: City) => {\n  return {\n    name: city.CITY,\n    latlng: [\n      parseFloat(city.latitude).toFixed(1),\n      parseFloat(city.longitude).toFixed(1),\n    ],\n  }\n})\n\nexport const citiesWithLatLng = filteredCityData\n","import React, { useEffect, useState } from \"react\"\nimport {\n  MapContainer as LeafletMap,\n  Marker,\n  Popup,\n  TileLayer,\n  Tooltip,\n} from \"react-leaflet\"\n\nimport {\n  countriesWithNumOfDevsObj,\n  citiesWithNumOfDevsObj,\n} from \"../util/UsersDataCleanup\"\n\nimport { countriesWithLatLng } from \"../util/CountriesDataFilter\"\nimport { citiesWithLatLng } from \"../util/CitiesDataFilter\"\n\n// Tableau des noms de pays et du nombre de développeurs dans ces pays.\n/* Nécessaire de faire correspondre les noms de pays de countriesWithNumOfDevsObj avec \nnoms de pays récupérés dans l'API pour obtenir leur latitude et leur longitude pour les marqueurs */\nconst countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj)\nconst cityNamesAndNumOfDevsArr = Object.entries(citiesWithNumOfDevsObj)\n\nlet centerLatLngArr: any = []\n\nfunction SimpleMap({ zoom = 3 }) {\n  const [allCountriesLatLang, setAllCountriesLatLang] = useState([])\n  useEffect(() => {\n    setAllCountriesLatLang(countriesWithLatLng)\n  }, [])\n  const [allCitiesLatLang, setAllCitiesLatLang] = useState([])\n  useEffect(() => {\n    setAllCitiesLatLang(citiesWithLatLng)\n  }, [])\n\n  let countriesLatLngArr: any = allCountriesLatLang.map(({ name, latlng }) => ({\n    name,\n    latlng,\n  }))\n  let citiesLatLngArr: any = allCitiesLatLang.map(({ name, latlng }) => ({\n    name,\n    latlng,\n  }))\n\n  let finalArrayWithCityAndLatLng: any = []\n  function finalCityAndLocationArray() {\n    for (let i = 0; i < cityNamesAndNumOfDevsArr.length; i++) {\n      for (let j = 0; j < citiesLatLngArr.length; j++) {\n        if (\n          cityNamesAndNumOfDevsArr[i][0].toLowerCase() ===\n          citiesLatLngArr[j].name.toLowerCase()\n        ) {\n          finalArrayWithCityAndLatLng.push({\n            city: citiesLatLngArr[j].name,\n            latlng: citiesLatLngArr[j].latlng,\n            numberOfDevs: cityNamesAndNumOfDevsArr[i][1],\n          })\n        }\n      }\n    }\n\n    return finalArrayWithCityAndLatLng\n  }\n  let finalArrayWithCountryAndLatLng: any = []\n  function finalCountryAndLocationArray() {\n    for (let i = 0; i < countryNamesAndNumOfDevsArr.length; i++) {\n      for (let j = 0; j < countriesLatLngArr.length; j++) {\n        if (\n          countryNamesAndNumOfDevsArr[i][0].toLowerCase() ===\n          countriesLatLngArr[j].name.toLowerCase()\n        ) {\n          finalArrayWithCountryAndLatLng.push({\n            country: countriesLatLngArr[j].name,\n            latlng: countriesLatLngArr[j].latlng,\n            numberOfDevs: countryNamesAndNumOfDevsArr[i][1],\n          })\n        }\n      }\n    }\n\n    return finalArrayWithCountryAndLatLng\n  }\n  finalCountryAndLocationArray()\n  finalCityAndLocationArray()\n\n  // NE PAS SUPPRIMER CE CODE COMMENTÉ CI-DESSOUS\n  // On peut en avoir besoin pour vérifier les entrées répétées inattendues, ce qui est plus facile avec les pays triés.\n  /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignorer les majuscules et les minuscules\n    var nameB = b.country.toUpperCase(); // ignorer les majuscules et les minuscules\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n  const markersArrayCities = finalArrayWithCityAndLatLng.map(\n    ({ city, latlng }: any) => {\n      return (\n        <Marker key={city} position={[latlng[0], latlng[1]]}>\n          <Popup>{city}</Popup>\n        </Marker>\n      )\n    }\n  )\n  const markersArray = finalArrayWithCountryAndLatLng.map(\n    ({ country, latlng, numberOfDevs }: any) => {\n      let numberOfDevsText =\n        numberOfDevs === 1\n          ? numberOfDevs + \" Développeur de \" + country\n          : numberOfDevs + \" Développeurs de \" + country\n      return (\n        <Marker key={country} position={[latlng[0], latlng[1]]}>\n          <Tooltip>{numberOfDevsText}</Tooltip>\n          <Popup>{numberOfDevsText}</Popup>\n        </Marker>\n      )\n    }\n  )\n\n  const center: any =\n    centerLatLngArr.length > 0\n      ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng]\n      : [55.378052, -3.435973]\n\n  return (\n    <div style={{ height: \"90vh\", width: \"100%\", margin: 0 }}>\n      <LeafletMap\n        center={center}\n        zoom={zoom}\n        minZoom={1}\n        maxZoom={10}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {markersArray}\n        {markersArrayCities}\n      </LeafletMap>\n    </div>\n  )\n}\n\nexport default SimpleMap\n"],"names":["countriesWithLatLng","map","country","COUNTRY","parseFloat","latitude","toFixed","longitude","citiesWithLatLng","city","name","CITY","latlng","countryNamesAndNumOfDevsArr","Object","entries","countriesWithNumOfDevsObj","cityNamesAndNumOfDevsArr","citiesWithNumOfDevsObj","centerLatLngArr","zoom","useState","allCountriesLatLang","setAllCountriesLatLang","useEffect","allCitiesLatLang","setAllCitiesLatLang","countriesLatLngArr","citiesLatLngArr","finalArrayWithCityAndLatLng","finalArrayWithCountryAndLatLng","i","length","j","toLowerCase","push","numberOfDevs","finalCountryAndLocationArray","finalCityAndLocationArray","markersArrayCities","Marker","position","Popup","markersArray","numberOfDevsText","Tooltip","center","lat","lng","style","height","width","margin","minZoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","TileLayer","attribution","url"],"sourceRoot":""}